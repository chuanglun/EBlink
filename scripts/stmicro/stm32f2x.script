/////////////////////////////////////////////////////
//
//                   STM32F2x
//

/////////////////////////////////////////////////////
//
//   Memory map template of this device(s)
//   Avoid unnecessary spaces. (we omit the DOCTYPE, GDB isn't using it. )
//
const mem_template = @@"
<?xml version=\"1.0\"?>
<memory-map>
 <memory type=\"rom\" start=\"0x00000000\" length=\"0x%x\"/>
 <memory type=\"ram\" start=\"0x20000000\" length=\"0x%x\"/>
  <!-- Sectors 0..3 16KB each -->
 <memory type=\"flash\" start=\"0x08000000\" length=\"0x10000\">
  <property name=\"blocksize\">0x4000</property>
  <property name=\"secstart\">0</property>
 </memory>
  <!-- Sectors 4 64KB each -->
 <memory type=\"flash\" start=\"0x08010000\" length=\"0x10000\">
  <property name=\"blocksize\">0x10000</property>
 </memory> 
  <!-- Sectors 5.. 128KB each -->
 <memory type=\"flash\" start=\"0x08020000\" length=\"0x%x\">
  <property name=\"blocksize\">0x20000</property>
 </memory>
 <memory type=\"ram\" start=\"0x40000000\" length=\"0x1fffffff\"/>
 <memory type=\"ram\" start=\"0xe0000000\" length=\"0x1fffffff\"/>
<!-- option byte area -->
 <memory type=\"rom\" start=\"0x1ffff800\" length=\"0x10\"/>
</memory-map>"

/////////////////////////////////////////////////////
//
//  Entry point of this script called by parent script
//
//      Remark: The intrfApi is a global object from parent
//
function stm32_device(deviceId)
{
    local devApi = ::DeviceAPI()

    local result
    local flash_size
    local ram_size

    // Enable debug clocks: DBG_STANDBY & DBG_STOP & DBG_SLEEP - RM0090 Page 1676/1705
    result = intrfApi.writeMem32(0xE0042004, 7)
    if(result <0) return result;

    // Stop watchdog counters during halt: DBGMCU_APB1_FZ = DBG_IWDG_STOP | DBG_WWDG_STOP
    result = intrfApi.writeMem32(0xE0042008, 0x00001800)
    if(result <0) return result;

    // Get the flash size by reading the info register
    result = intrfApi.readMem32(0x1fff7a22)
    if(result <0) return result;
        
    flash_size = intrfApi.value32 >>16    
    flash_size = (flash_size & 0xffff) * 1024

    printf("STmicro family : STM32F")
    switch(deviceId) {
        case 0x411 : // CHIPID_STM32_F2
            printf("2xx\n")
            ram_size = 0x20000
            break

    }

    // Inform the user
    printf("Detected FLASH : 0x%X\nConfigured RAM : 0x%X\n", flash_size, ram_size)

    // The user specified the size of flash memory
    if (isScriptObject("FLASH_SIZE") && FLASH_SIZE>0)
    {
      flash_size = (FLASH_SIZE & 0xffff) * 1024
      printf("CLI set  FLASH : 0x%X\n", flash_size)
    }

    // The user specified the size of ram memory
    if (isScriptObject("RAM_SIZE") && RAM_SIZE>0)
    {
      ram_size = (RAM_SIZE & 0xffff) * 1024
      printf("CLI set    RAM : 0x%X\n", ram_size)
    }

    devApi.memmap( format( mem_template,  flash_size,
                                          ram_size,
                                          flash_size - (128*1024) ) )

    require("stmicro/flash/f7_f4_f2.script")
    return ERROR_OK
}

/////////////////////////////////////////////////////////////////////////////////
//
// Additional commands after reset (optional) called by EBlink
//
// resetType:
//        SYSTEM_RESET
//        CORE_RESET
//        JTAG_RESET
//        USER_RESET
//
function  reset_post(resetType)
{
    // Check if there is an user defined post reset hook, the user
    // can add his own reset strategy with -S <myscript> as last
    // defined script on the cli.
    if (isScriptObject("reset_post_hook"))
        return reset_post_hook(resetType);

    local targetApi = :: TargetAPI() // Our interface to the target class

    // We don't use this if the reset is a user_script type. In that
    // case, the user is responsible for the initialization.
    //
    if( resetType != USER_RESET )
    {
        // Set the Stack pointer according the Vector table entry
        intrfApi.readMem32(0x08000000)
        targetApi.writeReg("SP", intrfApi.value32)

        // Set the Program pointer according the Vector table entry
        intrfApi.readMem32(0x08000004)
        targetApi.writeReg("PC", intrfApi.value32)
    }

    return ERROR_OK
}


