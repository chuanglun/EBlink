/////////////////////////////////////////////////////
//
//                   STM32FL4x
//

/////////////////////////////////////////////////////
//
//   Memory map template of this device(s)
//   Avoid unnecessary spaces.
//

//*************************************************************
//*****             Memory map of the L4                   ****
//*************************************************************
const mem_template_L4 = @@"
<?xml version=\"1.0\"?>
<memory-map>
  <memory type=\"rom\" start=\"0x00000000\" length=\"0x100000\"/>
  <memory type=\"ram\" start=\"0x10000000\" length=\"0x4000\"/>
  <memory type=\"ram\" start=\"0x20000000\" length=\"0x%x\"/>

  <memory type=\"flash\" start=\"0x08000000\" length=\"0x%x\">
   <property name=\"blocksize\">0x%x</property>
   <property name=\"secstart\">0</property>
  </memory>

  <memory type=\"ram\" start=\"0x40000000\" length=\"0x1fffffff\"/>
  <memory type=\"ram\" start=\"0x60000000\" length=\"0x7fffffff\"/>
  <memory type=\"ram\" start=\"0xe0000000\" length=\"0x1fffffff\"/>
  <memory type=\"rom\" start=\"0x1fff0000\" length=\"0x7800\"/>
  <memory type=\"rom\" start=\"0x1fffc000\" length=\"0x10\"/>
 </memory-map>"


// The parameters for the flash script
const FLASH_BASE 0x40022000
hasDualBank <- false // Can be set by upper scripts is we have dual bank support

/////////////////////////////////////////////////////
//
//  Entry point of this script called by parent script
//
//      Remark: The intrfApi is a global object from parent
//
function stm32_device(deviceId)
{
    local devApi = ::DeviceAPI()

    local result
    local flash_size
    local page_size
    local ram_size

    // Enable debug clocks: DBG_STANDBY & DBG_STOP & DBG_SLEEP - RM0090 Page 1676/1705
    result = intrfApi.writeMem32(0xE0042004, 7)

    // Stop watchdog counters during halt: DBGMCU_APB1_FZ = DBG_IWDG_STOP | DBG_WWDG_STOP
    result = intrfApi.writeMem32(0xE0042008, 0x00001800)

    // Get the flash size in KB
    result = intrfApi.readMem32(0x1fff75e0)
    flash_size = (intrfApi.value32 &0xFFFF) *1024

    // Set the memory map according the device ID
      printf("STmicro family : STM32")
      switch(deviceId) {
        case 0x415 : // CHIPID_STM32_L47/L48
        case 0x461 : // CHIPID_STM32_L49X/L4A
            printf( deviceId== 0x415 ? "L47/L48xx\n" : "L49/L4Axx\n")
            if( (flash_size == (1024*1024)) && readDualBankOption(21) )
            {
                hasDualBank = true
            }
            ram_size = 0x18000
            page_size = 0x800
            break

        case 0x435 :
            printf("L43/L44xx\n")
            ram_size = 0x10000
            page_size = 0x800
            break

        case 0x462 :
            printf("L45/L46xx\n")
            ram_size = 0x10000
            page_size = 0x800
            break

        case 0x464 :
            printf("L41/L42xx\n")
            ram_size = 0x10000
            page_size = 0x800
            break

        case 0x470 : // CHIPID_STM32_L4R/L4S
        case 0x471 : // CHIPID_STM32_L4P5/L4Q5x
            printf( deviceId== 0x470 ? "L4R/L4Sxx\n" : "L4P5/L4Q5x\n")
            page_size = 0x2000
            if( (flash_size == (1024*1024)) & readDualBankOption(21) )
            {
                hasDualBank = true
                page_size = 0x1000
            }
            ram_size = 0x18000
            break

        default:
        break
    }

    // Inform the user
    printf("Detected FLASH : 0x%X%s\nConfigured RAM : 0x%X\n", flash_size, (hasDualBank ? " - Dualbank" :""), ram_size)

    // The user specified the size of flash memory
    if (isScriptObject("FLASH_SIZE") && FLASH_SIZE>0)
    {
      flash_size = (FLASH_SIZE & 0xffff) * 1024
      printf("CLI set  FLASH : 0x%X\n", flash_size)
    }

    // The user specified the size of ram memory
    if (isScriptObject("RAM_SIZE") && RAM_SIZE>0)
    {
      ram_size = (RAM_SIZE & 0xffff) * 1024
      printf("CLI set    RAM : 0x%X\n", ram_size)
    }

    devApi.memmap(format( mem_template_L4, ram_size, flash_size, page_size))

    // Include flash loader script
    require("stmicro/flash/wx_l4_gx.script")

    return ERROR_OK
}

////////////////////////////////////////
//
//  Helper function to get the dual bank
//  option state
//
function readDualBankOption(bit)
{
     intrfApi.readMem32(FLASH_BASE+0x20)
     return (intrfApi.value32 & (1<<bit) ? true: false)
}

/////////////////////////////////////////////////////////////////////////////////
//
// Additional commands after reset (optional) called by EBlink
//
// resetType:
//        SYSTEM_RESET
//        CORE_RESET
//        JTAG_RESET
//        USER_RESET
//
function  reset_post(resetType)
{
    // Check if there is an user defined post reset hook, the user
    // can add his own reset strategy with -S <myscript> as last
    // defined script on the cli.
    if (isScriptObject("reset_post_hook"))
        return reset_post_hook(resetType);

    local targetApi = :: TargetAPI() // Our interface to the target class

    // We don't use this if the reset is a user_script type. In that
    // case, the user is responsible for the initialization.
    //
    if( resetType != USER_RESET )
    {
        // Set the Stack pointer according the Vector table entry
        intrfApi.readMem32(0x08000000)
        targetApi.writeReg("SP", intrfApi.value32)

        // Set the Program pointer according the Vector table entry
        intrfApi.readMem32(0x08000004)
        targetApi.writeReg("PC", intrfApi.value32)
    }

    return ERROR_OK
}

