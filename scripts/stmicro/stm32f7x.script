/////////////////////////////////////////////////////
//
//                   STM32F7x
//

/////////////////////////////////////////////////////
//
//   Memory map template of this device(s)
//   Avoid unnecessary spaces. (we omit the DOCTYPE, GDB isn't using it. )
//
const mem_template_F7 = @@"
<?xml version=\"1.0\"?>
<memory-map>
 <!-- ITCM ram 16kB -->
 <memory type=\"ram\" start=\"0x00000000\" length=\"0x4000\"/>
 <!-- ITCM flash -->
 <memory type=\"rom\" start=\"0x00200000\" length=\"0x100000\"/>
 <!-- sram -->
 <memory type=\"ram\" start=\"0x20000000\" length=\"0x%X\"/>

 <!-- Sectors 0..3 32KB each -->
 <memory type=\"flash\" start=\"0x08000000\" length=\"0x20000\">
  <property name=\"blocksize\">0x8000</property>
  <property name=\"secstart\">0</property>
 </memory>

 <!-- Sector 4 128 kB -->
 <memory type=\"flash\" start=\"0x08020000\" length=\"0x20000\">
  <property name=\"blocksize\">0x20000</property>
 </memory>

 <!-- Sectors 5..7 128kB each -->
 <memory type=\"flash\" start=\"0x08040000\" length=\"0xC0000\">
  <property name=\"blocksize\">0x40000</property>
 </memory>

 <!-- Place holder for second 1MB -->
 %s

 <!-- peripheral regs -->
 <memory type=\"ram\" start=\"0x40000000\" length=\"0x1fffffff\"/>
 <!-- AHB3 Peripherals -->
 <memory type=\"ram\" start=\"0x60000000\" length=\"0x7fffffff\"/>
 <!-- cortex regs -->
 <memory type=\"ram\" start=\"0xe0000000\" length=\"0x1fffffff\"/>
 <!-- bootrom -->
 <memory type=\"rom\" start=\"0x00100000\" length=\"0xEDC0\"/>
 <!-- option byte area -->
 <memory type=\"rom\" start=\"0x1fff0000\" length=\"0x20\"/>
</memory-map>"


const mem_template_2MB = @@"
<!-- Sectors 8..11 128kB each -->
<memory type=\"flash\" start=\"0x08100000\" length=\"0x100000\">
<property name=\"blocksize\">0x40000</property>
</memory>"


const mem_template_F73 = @@"
<?xml version=\"1.0\"?>
<memory-map>
 <!-- ITCM ram 16kB -->
 <memory type=\"ram\" start=\"0x00000000\" length=\"0x4000\"/>
 <!-- ITCM flash -->
 <memory type=\"rom\" start=\"0x00200000\" length=\"0x100000\"/>
 <!-- sram -->
 <memory type=\"ram\" start=\"0x20000000\" length=\"0x%X\"/>

 <!-- Sectors 0..3 16KB each -->
 <memory type=\"flash\" start=\"0x08000000\" length=\"0x20000\">
  <property name=\"blocksize\">0x4000</property>
  <property name=\"secstart\">0</property>
 </memory>

  <!-- Place holder for STM32F2 -->
 %s

 <!-- peripheral regs -->
 <memory type=\"ram\" start=\"0x40000000\" length=\"0x1fffffff\"/>
 <!-- AHB3 Peripherals -->
 <memory type=\"ram\" start=\"0x60000000\" length=\"0x7fffffff\"/>
 <!-- cortex regs -->
 <memory type=\"ram\" start=\"0xe0000000\" length=\"0x1fffffff\"/>
 <!-- bootrom -->
 <memory type=\"rom\" start=\"0x00100000\" length=\"0xEDC0\"/>
 <!-- option byte area -->
 <memory type=\"rom\" start=\"0x1fff0000\" length=\"0x20\"/>
</memory-map>"


const mem_template_F72 = @@"
 <!-- Sector 4 64 kB -->
 <memory type=\"flash\" start=\"0x08020000\" length=\"0x20000\">
  <property name=\"blocksize\">0x10000</property>
 </memory>

 <!-- Sectors 5..7 128kB each -->
 <memory type=\"flash\" start=\"0x08040000\" length=\"0xC0000\">
  <property name=\"blocksize\">0x20000</property>
 </memory>"

/////////////////////////////////////////////////////
//
//  Entry point of this script called by parent script
//
//      Remark: The intrfApi is a global object from parent
//
function stm32_device(deviceId)
{
    local devApi = ::DeviceAPI()

    local result
    local flash_size
    local page_size
    local ram_size

    // Enable debug clocks: DBG_STANDBY & DBG_STOP & DBG_SLEEP - RM0090 Page 1676/1705
    result = intrfApi.writeMem32(0xE0042004, 7)

    // Stop watchdog counters during halt: DBGMCU_APB1_FZ = DBG_IWDG_STOP | DBG_WWDG_STOP
    result = intrfApi.writeMem32(0xE0042008, 0x00001800)

    // Get the flash size by reading the info register
    if(deviceId == 0x452)
        result = intrfApi.readMem32(0x1FF07A22)
    else
        result = intrfApi.readMem32(0x1ff0f442)

    flash_size = intrfApi.value32 >>16
    flash_size = (flash_size & 0xffff) * 1024

    // Default memory map
    local memMap = mem_template_F7

    // Additional memory block
    local addMem = ""

    local deviceStr
    switch(deviceId) {
        case 0x449 :
            deviceStr = "74x/75x"
            if(flash_size>0x100000)
                addMem = mem_template_2MB
            ram_size = 0x50000
            break

        case 0x451 :
            deviceStr = "76x/77x"
            if(flash_size>0x100000)
                addMem = mem_template_2MB
            ram_size = 0x80000
            break

        case 0x452 :
            deviceStr = "72x/73x"
            memMap = mem_template_F73
            if( flash_size > 0x8000 )
                addMem = mem_template_F72
            ram_size = 0x80000
            break
    }

    // Inform user of the device found
    printf("STmicro family : STM32F%s\n", deviceStr)

    // Inform the user
    printf("Detected FLASH : 0x%X\nConfigured RAM : 0x%X\n", flash_size, ram_size)

    // The user specified the size of flash memory
    if (isScriptObject("FLASH_SIZE") && FLASH_SIZE>0)
    {
      flash_size = (FLASH_SIZE & 0xffff) * 1024
      printf("CLI set  FLASH : 0x%X\n", flash_size)
    }

    // The user specified the size of ram memory
    if (isScriptObject("RAM_SIZE") && RAM_SIZE>0)
    {
      ram_size = (RAM_SIZE & 0xffff) * 1024
      printf("CLI set    RAM : 0x%X\n", ram_size)
    }

    devApi.memmap( format(memMap, ram_size, addMem))


    require("stmicro/flash/f7_f4_f2.script")

    return ERROR_OK
}

/////////////////////////////////////////////////////////////////////////////////
//
// Additional commands after reset (optional) called by EBlink
//
// resetType:
//        SYSTEM_RESET
//        CORE_RESET
//        JTAG_RESET
//        USER_RESET
//
function  reset_post(resetType)
{
    // Check if there is an user defined post reset hook, the user
    // can add his own reset strategy with -S <myscript> as last
    // defined script on the cli.
    if (isScriptObject("reset_post_hook"))
        return reset_post_hook(resetType);

    local targetApi = :: TargetAPI() // Our interface to the target class

    // We don't use this if the reset is a user_script type. In that
    // case, the user is responsible for the initialization.
    //
    if( resetType != USER_RESET )
    {
        // Set the Stack pointer according the Vector table entry
        intrfApi.readMem32(0x08000000)
        targetApi.writeReg("SP", intrfApi.value32)

        // Set the Program pointer according the Vector table entry
        intrfApi.readMem32(0x08000004)
        targetApi.writeReg("PC", intrfApi.value32)
    }

    return ERROR_OK
}



