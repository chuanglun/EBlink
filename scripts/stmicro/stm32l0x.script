/////////////////////////////////////////////////////
//
//                   STM32L0x
//

/////////////////////////////////////////////////////
//
//   Memory map template of this device(s)
//   Avoid unnecessary spaces. (we omit the DOCTYPE, GDB isn't using it. )
//
const mem_template = @@"
<?xml version=\"1.0\"?>
<memory-map>
 <memory type=\"rom\" start=\"0x00000000\" length=\"0x%x\"/>
 <memory type=\"ram\" start=\"0x20000000\" length=\"0x%x\"/>
 <memory type=\"flash\" start=\"0x08000000\" length=\"0x%x\">
  <property name=\"blocksize\">0x%x</property>
  <property name=\"secstart\">0</property>
 </memory>
 <memory type=\"rom\" start=\"0x1FF80000\" length=\"20\"/>
 <memory type=\"ram\" start=\"0x40000000\" length=\"0x1fffffff\"/>
 <memory type=\"ram\" start=\"0xe0000000\" length=\"0x1fffffff\"/>
</memory-map>"

// The flash parameters needed by the flash loader script
const FLASH_BASE 0x40022000

/////////////////////////////////////////////////////
//
//  Entry point of this script called by parent script
//
//      Remark: The intrfApi is a global object from parent
//
function stm32_device(deviceId)
{
    local devApi = ::DeviceAPI()
    local result
    local flash_size
    local page_size = 0x80
    local ram_size = 0x2000

    // Enable debug clocks: DBG_STANDBY & DBG_STOP & DBG_SLEEP - RM0090 Page 1676/1705
    result = intrfApi.writeMem32(0x40015804, 6)

    // Get the flash size by reading the info register
    result = intrfApi.readMem32(0x1ff8007c)
    flash_size = intrfApi.value32 & ~3
    flash_size = (flash_size & 0xffff) * 1024

    printf("STmicro family : STM32L0xx ")
    switch(deviceId)
    {
        case 0x417 :0
            printf("(Cat. 3)\n")
            page_size = 0x80
            ram_size = 0x2000
            break

        case 0x425 :
            printf("(Cat. 2)\n")
            page_size = 0x80
            ram_size = 0x2000
            break

        case 0x447 :
            printf("(Cat. 5)\n")
            page_size = 0x80
            ram_size = 0x5000
            break

        case 0x457 :
            printf("(Cat. 1)\n")
            page_size = 0x80
            ram_size = 0x2000
            break
    }

    // Inform the user
    printf("Detected FLASH : 0x%X\nConfigured RAM : 0x%X\n", flash_size, ram_size)

    // The user specified the size of flash memory
    if (isScriptObject("FLASH_SIZE") && FLASH_SIZE>0)
    {
      flash_size = (FLASH_SIZE & 0xffff) * 1024
      printf("CLI set  FLASH : 0x%X\n", flash_size)
    }

    // The user specified the size of ram memory
    if (isScriptObject("RAM_SIZE") && RAM_SIZE>0)
    {
      ram_size = (RAM_SIZE & 0xffff) * 1024
      printf("CLI set    RAM : 0x%X\n", ram_size)
    }

    devApi.memmap( format( mem_template,  flash_size,
                                          ram_size,
                                          flash_size,
                                          page_size) )

    // The erased value of these chips is not 0xFF but 0x00
    devApi.setFlashEraseValue(0x00)

    // Don't trim the sectors, only whole sector sizes are programmed
    devApi.setFlashDontTrim(true)

    // Flash loader script
    require("stmicro/flash/l1_l0.script")

    return ERROR_OK
}

/////////////////////////////////////////////////////////////////////////////////
//
// Additional commands after reset (optional) called by EBlink
//
// resetType:
//        SYSTEM_RESET
//        CORE_RESET
//        JTAG_RESET
//        USER_RESET
//
function  reset_post(resetType)
{
    // Check if there is an user defined post reset hook, the user
    // can add his own reset strategy with -S <myscript> as last
    // defined script on the cli.
    if (isScriptObject("reset_post_hook"))
        return reset_post_hook(resetType);

    local targetApi = :: TargetAPI() // Our interface to the target class

    // We don't use this if the reset is a user_script type. In that
    // case, the user is responsible for the initialization.
    //
    if( resetType != USER_RESET )
    {
        // Set the Stack pointer according the Vector table entry
        intrfApi.readMem32(0x08000000)
        targetApi.writeReg("SP", intrfApi.value32)

        // Set the Program pointer according the Vector table entry
        intrfApi.readMem32(0x08000004)
        targetApi.writeReg("PC", intrfApi.value32)
    }

    return ERROR_OK
}


