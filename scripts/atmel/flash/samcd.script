/////////////////////////////////////////////////////////////////////////////////
//
//          SAM_[C][D][L] flash loader
//
//          _n_throw is a built-in function which throws an exception if argument < 0
//

const USER_ROW      0x00804000  // User Row of Flash
const PAC1          0x41000000  // Peripheral Access Control 1
const DSU           0x41002000  // Device Service Unit
const NVMCTRL       0x41004000  // Non-volatile memory controller

const DSU_CTRLSTAT      0x100
const DSU_ADDRESS       0x104
const DSU_LENGTH        0x108
const DSU_DID           0x118
const DSU_PID          0x1000
const DSU_CID          0x1010

// Control and Status Register (CTRLSTAT)
const CTRL_CHIP_ERASE   (1 << 4)
const CTRL_MBIST        (1 << 3)
const CTRL_CRC          (1 << 2)
const STATUSA_PERR      (1 << 12)
const STATUSA_FAIL      (1 << 11)
const STATUSA_BERR      (1 << 10)
const STATUSA_CRSTEXT   (1 << 9)
const STATUSA_DONE      (1 << 8)
const STATUSB_PROT      (1 << 16)

const NVMCTRL_CTRLA     0x00    // NVM control A register
const NVMCTRL_CTRLB     0x04    // NVM control B register
const NVMCTRL_PARAM     0x08    // NVM parameters register
const NVMCTRL_INTFLAG   0x14    // NVM Interrupt Flag Status & Clear
const NVMCTRL_STATUS    0x18    // NVM status register
const NVMCTRL_ADDR      0x1C    // NVM address register
const NVMCTRL_LOCK      0x20    // NVM Lock section register


// NVMCTRL commands.  See Table 20-4 in 42129F–SAM–10/2013
const NVM_CMD_ER        0x02        // Erase Row
const NVM_CMD_WP        0x04        // Write Page
const NVM_CMD_EAR       0x05        // Erase Auxiliary Row
const NVM_CMD_WAP       0x06        // Write Auxiliary Page
const NVM_CMD_LR        0x40        // Lock Region
const NVM_CMD_UR        0x41        // Unlock Region
const NVM_CMD_SPRM      0x42        // Set Power Reduction Mode
const NVM_CMD_CPRM      0x43        // Clear Power Reduction Mode
const NVM_CMD_PBC       0x44        // Page Buffer Clear
const NVM_CMD_SSB       0x45        // Set Security Bit
const NVM_CMD_INVALL    0x46        // Invalidate all caches

/* Control A Register (CTRLA) */
const CTRLA_CMD_KEY             0xA500
const CTRLA_CMD_ERASEROW        0x0002
const CTRLA_CMD_WRITEPAGE       0x0004
const CTRLA_CMD_ERASEAUXROW     0x0005
const CTRLA_CMD_WRITEAUXPAGE    0x0006
const CTRLA_CMD_LOCK            0x0040
const CTRLA_CMD_UNLOCK          0x0041
const CTRLA_CMD_PAGEBUFFERCLEAR 0x0044
const CTRLA_CMD_SSB             0x0045
const CTRLA_CMD_INVALL          0x0046

// Interrupt Flag Register (INTFLAG)
const NVMC_READY            (1 << 0)

maxFlashSpeed   <- 10000  // 10MHz is max speed for direct programming (we think)

// Generic Flash Script errors
require("atmel/flash/errors.script")

/////////////////////////////////////////////////////////////////////////////////
//
//   Called by EBlink to initialize upcoming flash operations.
//
function flash_start()
{
    local targetApi = :: TargetAPI() // Our interface to the target class

    // Override the maximum flash speed from cli
    if (isScriptObject("FLASH_SPEED") && FLASH_SPEED>0)
    {
        maxFlashSpeed = FLASH_SPEED
        printf("Flash speed set: %d KHz\n", maxFlashSpeed)
    }

    // Check that we don't go faster than the user selected on the cli
    if(maxFlashSpeed > intrfApi.getSpeed())
        maxFlashSpeed = intrfApi.getSpeed()

    try{
        // Be sure that the core is halted
        _n_throw( targetApi.halt() )

        // Unlock Flash
        _n_throw(intrfApi.writeMem32( NVMCTRL + NVMCTRL_CTRLA, CTRLA_CMD_KEY | CTRLA_CMD_UNLOCK))

        return ERROR_OK
    }

    // Catch all the sector write errors
    catch(e){
       if(e < ERROR_NOTIFIED)
           errorf("ERROR: couldn't initialize target! %s\n", flashError(e) )
       return ERROR_NOTIFIED
    }
}

/////////////////////////////////////////////////////////////////////////////////
//
//   Called by EBlink to erase a sector
//
function flash_erase(sector, address)
{
    try{

        // Set address to be erased
        _n_throw(intrfApi.writeMem32( NVMCTRL + NVMCTRL_ADDR, address >> 1))

        // Erase the page
        _n_throw(intrfApi.writeMem32( NVMCTRL + NVMCTRL_CTRLA,  CTRLA_CMD_KEY | CTRLA_CMD_ERASEROW))

        // Wait for ready
        local time = GetTickCount()
        do{

            // Check for time out of 2 seconds
            if(GetTickCount() - time > 2000)
                _n_throw(ERROR_TIMEOUT)

            _n_throw( intrfApi.readMem32( NVMCTRL + NVMCTRL_INTFLAG) )
        }while ( (intrfApi.value32 & NVMC_READY) == 0 )

        return ERROR_OK
    }

    // Catch all the sector erase errors
    catch(e){
       if(e < ERROR_NOTIFIED)
           errorf("ERROR: erasing sector %d failed! %s\n", sector, flashError(e) )
       return ERROR_NOTIFIED
    }
}


/////////////////////////////////////////////////////////////////////////////////
//
//  Called by EBlink to write a sector.
//  We have to write a single page at the time, a sector has 4 pages
//
function flash_write(sector, address, buffer)
{
    local targetApi = :: TargetAPI() // Our interface to the target class
    local length = buffer.getSize()
    local offset = 0

    try{
        // For direct flash writing we can't be too fast.
        local probeSpeed = intrfApi.getSpeed()
        _n_throw(intrfApi.setSpeed(maxFlashSpeed))

        while(length)
        {
            // Do we have a whole page length or less
            local wrlen = ( length > 64 ? 64 : length)

            // Write page
            _n_throw( targetApi.writeMem(address, buffer, offset, wrlen) )

            offset += wrlen
            length -= wrlen
            address += wrlen

            // write page
            _n_throw(intrfApi.writeMem32(NVMCTRL + NVMCTRL_CTRLA, CTRLA_CMD_KEY | CTRLA_CMD_WRITEPAGE))


            // Wait for ready
            local time = GetTickCount()
            do{

                // Check for time out of 2 seconds
                if(GetTickCount() - time > 2000)
                    _n_throw(ERROR_TIMEOUT)

                _n_throw( intrfApi.readMem32( NVMCTRL + NVMCTRL_INTFLAG) )
            }while ( (intrfApi.value32 & NVMC_READY) == 0 )

        }

        // Restore probe speed
        _n_throw(intrfApi.setSpeed(probeSpeed))
        return ERROR_OK
    }

    // Catch all the sector write errors
    catch(e){
       if(e < ERROR_NOTIFIED)
           errorf("ERROR: writing sector %d failed! %s\n", sector, flashError(e) )
       return ERROR_NOTIFIED
    }
}

/////////////////////////////////////////////////////////////////////////////////
//
//   Finalize the flash operations
//
function flash_done()
{
    try{
        // lock the flash
        _n_throw(intrfApi.writeMem32(NVMCTRL + NVMCTRL_CTRLA, CTRLA_CMD_KEY | CTRLA_CMD_LOCK))
        return ERROR_OK
    }

    // Catch all the sector write errors
    catch(e){
       return e
    }
}

/////////////////////////////////////////////////////////////////////////////////
//
//  Called by EBlink if chip erase is needed (e.g. command line flashing)
//
//   Erase the whole chip
//   - If this function is not defined, sector by sector erase is used by EBlink.
//   - This is an isolated function, flash_start and flash_done are not called by EBlink
//
function flash_erase_chip()
{
    local targetApi = :: TargetAPI() // Our interface to the target class

    try{

        // Be sure that the target is halted
        _n_throw( targetApi.halt() )

        // Clear DSU status
        _n_throw(intrfApi.writeMem32( DSU + DSU_CTRLSTAT, STATUSA_DONE | STATUSA_PERR | STATUSA_FAIL))

        // Erase all
        _n_throw(intrfApi.writeMem32(DSU + DSU_CTRLSTAT, CTRL_CHIP_ERASE))


        // Wait for ready
        local time = GetTickCount()
        do{
            AnimateCursor()

            // Check for time out of 5 seconds
            if(GetTickCount() - time > 5000)
                _n_throw(ERROR_TIMEOUT)

            _n_throw( intrfApi.readMem32( DSU + DSU_CTRLSTAT) )
        }while ( (intrfApi.value32 & (STATUSA_DONE | STATUSA_PERR | STATUSA_FAIL)) == 0 )

        AnimateDone()

        // Test the protection error bit in Status A
        if (intrfApi.value32 & STATUSA_PERR) {
            errorf("Erase failed due to a protection error.\n");
            _n_throw(ERROR_NOTIFIED)
        }

        // Test the fail bit in Status A
        if (intrfApi.value32 & STATUSA_FAIL) {
            errorf("Erase failed.\n");
            _n_throw(ERROR_NOTIFIED)
        }
        return ERROR_OK
    }

    // Catch all the sector erase errors
    catch(e){
       if(e < ERROR_NOTIFIED)
           errorf("ERROR: mass erase failed! %s\n", flashError(e) )
       return ERROR_NOTIFIED
    }
}
