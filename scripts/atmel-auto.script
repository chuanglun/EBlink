//! Atmel
/////////////////////////////////////////////////////
//
//     This is a virtual device for Atmel cortex's M0(plus)
//
//     The script tries to detect the right memory sizes
//     however, if this is not correct you can set the sizes
//     in kilobytes on the command line as:
//
//         -D FLASH_SIZE=xxx  and -D RAM_SIZE=xxxx  (check also device scripts)
//

intrfApi <- InterfAPI()  // Global so that all included script files also have access

const SAMD_DSU      0x41002000  // Device Service Unit
const SAMD_DSU_DID  0x18        // Device ID register

/////////////////////////////////////////////////////
//
//  EBlink called Entry point
//
function main()
{
    // Default device ID register
    local result = intrfApi.readMem32(SAMD_DSU + SAMD_DSU_DID)
    if( (result >=0) && (intrfApi.value32 != 0) )
    {
        require("atmel/samcd.script")
        return atmel_device(intrfApi.value32)
    }

    //result = intrfApi.readMem32(0x400E0740)
    //result = intrfApi.readMem32(0x400E0940)

    // If we still haven't a valid device ID, inform user and quit
    errorf("Error:\tCan't access target device!\n\tIf reset is disabled (\"dr\" option), try with reset.")
    return ERROR_NOTIFIED  // We have already thrown an error so use -1 (otherwise < -1)
}


/////////////////////////////////////////////////////////////////////////////////
//
// Additional commands after reset (optional) called by EBlink
//
// resetType:
//        SYSTEM_RESET
//        CORE_RESET
//        JTAG_RESET
//        USER_RESET
//
const SAMD_DSU_CTRLSTAT     0x41002100
const SAMD_STATUSA_CRSTEXT  (1 << 9)
function  reset_post(resetType)
{
    // Check if there is an user defined post reset hook, the user
    // can add his own reset strategy with -S <myscript> as last
    // defined script on the cli.
    if (isScriptObject("reset_post_hook"))
        return reset_post_hook(resetType);

    local targetApi = :: TargetAPI() // Our interface to the target class

    // Exit extended reset
    intrfApi.readMem32(SAMD_DSU_CTRLSTAT)
    if( intrfApi.value32 & SAMD_STATUSA_CRSTEXT)
    {
        // Write bit to clear from extended reset
        intrfApi.writeMem32(SAMD_DSU_CTRLSTAT, SAMD_STATUSA_CRSTEXT);
    }


    // We don't use this if the reset is a user_script type. In that
    // case, the user is responsible for the initialization.
    if( resetType != USER_RESET )
    {
        // Set the Stack pointer according the Vector table entry
        intrfApi.readMem32(0x00000000)
        targetApi.writeReg("SP", intrfApi.value32)

        // Set the Program pointer according the Vector table entry
        intrfApi.readMem32(0x00000004)
        targetApi.writeReg("PC", intrfApi.value32)
    }

    return ERROR_OK
}
