Changes (19-02-2021) Release 3.9(2)
- Change: Connect strategy. Now connect under reset is tried if the first time fails
- Added : Script traget API new variable cpuType. Holds number x of the Cortex-Mx.

Changes (9-10-2020) Release 3.8(59)
- Bugfix: flash write hex string conversion could be wrong
- Added : Additional error info add wrong flash cli write parameters

Changes (9-10-2020) Release 3.8
- Moded: New flash engine with background caching
- Moded: Script buffer API simplidied and secure
- Moded: A lot of scripts are simplified
- Moded: Intel HEX reading optmized
- Fixed: script stm32f2x/f3x memory map

Changes (9-10-2020) Release 3.7
- Fixed : Bug large page size >64KB

Changes (8-10-2020) Release 3.6
- Added : Serial numbers of old STlinkV2 handling. STmicro changed the USB serial format later.
- Fixed : Multiple interfaces selected by interface serial

Changes (7-10-2020) Release 3.5 - stable
- Moded: Script F3 and F4 modified
- Moded: Windows EBlink context menu not on Recycle bin etc
- Moded: Clean shutdown win32 and linux after interface lost

Changes (6-10-2020) Release 3.4
- Added: script debugf,noticef for printing on different verbose level
- Moded: Default verbose level is 4, verbose level 5 is with notice info (so also e.g. device codes of stm32)
- Moded: Windows console disabled quick edit (selection blocks stdout and stderr)
- Fixes: script bugs with stm32gx and some minor changes  

Changes (5-10-2020) Release 3.3
- Added: Windows, notify and quit when is USB removed
- Added: Interface selection based on serial
- Moded: Some streamlining in the flash engine

Changes (2-10-2020) Release 3.2
- Rewriten flash algo's (with dual bank etc)

Changes (30-9-2020) Release 3.1
- Added: stlink 16bit memory support
- Moded: EBlink squirrel supports const with << operator
- Fixed: stm32l4 
- Fixed: stm32l0 and stm32l1 
- Moded: lot of rewrites of the flashing functions. External bootloaders are removed

Changes (25-9-2020) Release 3.0
 - Added: STM32WB55xx support
 - Fixed: spaces in names of folders and files
 - Fixed: Silent error handling of script functions returning error code < -1 (which means "user not informed yet")

Changes (16-9-2020) Release 2.9
 - Added: "-F cmp=myimage.elf" command to compare the content of file [elf,hex or srec] against MCU flash for e.g. automated testing.
 - Added: "-F dump=lenght@address:file" command to dump the memory content to file [hex or bin]. Works also at running target if used i.c.w. hotplug option (e.g. '-H' or '-I stlink,dr').
 - Added: On verbose level > 5 give info if and which environment variables are used for user feedback.
 - Added: Cortex-m target options (-T cortex-m,<...>)  for reset=[0..2],halt and resume e.g. automated testing.
 - Mod: Verbose level 0 is now minimal printing (previous level 8) for -F read memory output. Default verbose level will be 5 (previous level 4)
 - Mod: All the CLI length and address fields (e.g. flash write, read or dump) are now decimal or hex if starting with 0x

Changes (22-8-2020) Release 2.8
- Added: Introduced the environment variables EB_DEFAULT_PROBE and EB_DEFAULT_SCRIPT which will be used if the options are missing
	 from the command line. This will give you the possibility to use short commands to start EBlink. Such as:
	 
	 	e.g.  EBlink -F erase | EBlink -F run | EBlink -G etc 
	 
	 If eblink is also in your search path and EB_SCRIPT_PATH is also set then you can just flash any file instantly from within that directory
	 
	 	e.g.  EBlink -F file=myimage.elf,run
		
	 If you use mainly STMicro then you could set EB_DEFAULT_SCRIPT=stm32-auto and EB_DEFAULT_PROBE=stlink. 
	 Tip, use EB_DEFAULT_PROBE=stlink,dr to use hotplugging by default.

Changes (15-5-2020) Release 2.7
- Fix: the interfcae script function loadBin(<filename>) is now using the same serach path engine as the script loader

Changes (20-4-2020) Release 2.5
- Fix: stm32h7 script chip erase
- Fix: Flash file relative to eblink path (instead of script path)
- Fix: Flash verify was broken after adding flash read/write options

Changes (9-4-2020) Release 2.4
- Added: The flash option "read"  which will read a memory location from target and will return it 
         as a hex string. Use verbose level 8 to minimize info.
         Syntax read=<dec byte length>@<hex address>
                e.g.  EBlink -I stlink -S stm32-auto -F read=4@080000000,read=4@080000004

- Changed: The flash option "mod" is changed to write. Syntax write=hhhhhhhh@aaaaaa 
		 e.g. EBlink -I stlink -S stm32-auto -F write=12345678@080000004


Changes (7-4-2020) Release 2.3
- Added: The flash option "mod" to do flash modifications. This option can be used with or
         without file flashing. If a file is given then the modifications are done at file image.
		 e.g. EBlink -I stlink -S stm32-auto -F mod=080000004;DEAD12345678
		      EBlink -I stlink -S stm32-auto -F file=test,mod=080000004;DEAD12345678

Changes (5-4-2020) Release 2.2
- Added: --hotplug (-H) used in Embitz 2.0 for easy connection at running target without stopping

Changes (2-4-2020) Release 2.1
- Added: Breakpoint instruction (brkpt) handling single step
- Added: Semihosting

Changes (21-1-2020) Release 2.0
- Changed: The -D switch is replaced by -S and multiple -S switches can be used on command line
- Added:   The -D switch is now to define symbols which can be used in scripts (like GCC -D)
- Added:   The -P switchs will add search paths for the script files
- Changed: The GDB switch 'S' (shutdown after disconnect) is now lowercase 's' 

*********** Major CLI changes after version 2.0 ****************

Changes (21-12-2019) Release 1.2
- Added: set progress animation type with -a [n], needed for tool integration
    n = 0 (or just -a) -> turn off any progress animation
    n = 1 -> Animated cursor (default animation type)
    n > 1 -> Dotted progress with n*10ms resolution, so -a 10 = 100ms between dots.

Changes (8-12-2019) Version 1.1
- Added: Possibility to define multiple script file -D stm32auto,my_reset
- Added: Script uses default .script unless an extension is given
- Fixed: Mem download was truncated at 1800 bytes blocks 

Changes (6-12-2019) Version 1.0
- Added: script varaible VERSION to check API compatibility 
- Fixed: At debug or trace no cursor animation
- Mod:   To release state

Changes (5-12-2019) rc19.12-1
- Added: STM32G0x & STM32G4x fast programming (options not ready)
- Added: Interface speed query script function
- Mod:   STM32H7x flashing directly

Changes (28-11-2019) rc19.11-8
- Added: option bytes programming stm32h7. By using a virtual sector #999 of 32bytes, the option bytes can be defined inside GCC and are also stored inside ihex, srec or elf files. So production cli flashing will also program the option bytes. (See doc folder)
- Bug fix: Sector numbering passing to flash write function. 

Changes (18-11-2019) rc19.11-7
- BUG Fix: STlink/V2 init sequence was broken (was working and tested for V3 interfaces)
- Added: Support optional environment variable EB_SCRIPT_PATH
- Added: STlink auto connect reset sequence for foreign vendors (e.g. silabs)

CHANGES (14-11-2019)
- Reset behavior changed: "Connect under reset" is now always enabled and for hotplug use the Disable Reset ("dr") stlink interface option
- New script interfaceApi function "resetCtrl(bool)" which controls the NRST line directly
- Bug minor fixes
